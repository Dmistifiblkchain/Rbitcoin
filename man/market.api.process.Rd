% Generated by roxygen2 (4.0.2): do not edit by hand
\name{market.api.process}
\alias{market.api.process}
\title{Process market API}
\usage{
market.api.process(market, currency_pair, action, req = list(), ...,
  skip_post_process = FALSE, api.dict = getOption("Rbitcoin.api.dict",
  stop("no api.dict in options! options('Rbitcoin.api.dict')")),
  verbose = getOption("Rbitcoin.verbose", 0))
}
\arguments{
\item{market}{character, example: \code{'kraken'}.}

\item{currency_pair}{character vector of length 2, e.g. \code{c(base = 'BTC', quote = 'EUR')}, names are not mandatory but order does matter. It will also handle the \code{action} param provided in case of \code{market.api.process("kraken","wallet")}.}

\item{action}{character, defined process/method to get organized data.
\itemize{
\item \code{'ticker'} returns \code{data.table} ticker information.
\item \code{'wallet'} returns \code{list} wallet information like \code{currency}, \code{amount}.
\item \code{'order_book'} returns \code{list} with API call level attributes and sub elements \code{[['asks']]} and \code{[['bids']]} as \code{data.table} objects with order book including already calculated cumulative \code{amount}, \code{price} and \code{value}.
\item \code{'open_orders'} returns \code{list} open orders information like \code{oid}, \code{type}, \code{price}, \code{amount}.
\item \code{'place_limit_order'} returns \code{data.table} with fields: \code{oid}, \code{type}, \code{price}, \code{amount}.
\item \code{'cancel_order'} returns \code{data.table} with fields like \code{oid}.
\item \code{'trades'} returns \code{list} with API call level attributes and sub element \code{[['trades']]} as \code{data.table} (ASC order) with fields: \code{date}, \code{price}, \code{amount}, \code{tid}, \code{type}.
}}

\item{req}{list of action details (price, amount, tid, oid, etc.) unified across the markets specific per action, see examples.}

\item{skip_post_process}{logical skip post-processing and return results only after \code{fromJSON} processing. Useful in case of change response structure from market API. It can always be manually post-processed on user side as a workaround till the Rbitcoin api dict update.}

\item{api.dict}{data.table user custom API dictionary definition, if not provided function will use default Rbitcoin \code{getOption("Rbitcoin.api.dict")}.}

\item{verbose}{integer. Rbitcoin processing messages, print to console if \code{verbose > 0}, each subfunction reduce \code{verbose} by 1. If missing then \code{getOption("Rbitcoin.verbose",0)} is used.}

\item{\dots}{objects to be passed to \code{market.api.query} and farther to particular market query (read \code{query.dict}).
\itemize{
\item auth params: \code{key}, \code{secret}
\item auth param on bitstamp: \code{client_id}
\item any other args in case of own custom market function
}}
}
\value{
Unless \code{skip_post_process==TRUE} the returned value depends on the \code{action} param but does not depend on \code{market} anymore.
It returns a list or data.table.
It will also result truncation of most (not common across the markets) attributes returned. If you need the full set of data returned by market's API you might use \code{skip_post_process=TRUE}.
All actions will return API call response but also metadata about API call itself, in a common structure across different markets.
Follow Rbitcoin introduction vignette or examples.
}
\description{
Unified processing of API call according to API dictionary \code{api.dict}. Limited to markets and currency processing defined in \code{api.dict}, in case of currency pairs and methods not availble in dictionary use \code{market.api.query} directly. This function perform pre processing of request and post processing of API call response to unified structure across markets.
}
\details{
By default it will perform antiddos check and wait if required, it can be turned off but in such case you should expect to be banned quite easily. Read \code{?antiddos}.
}
\note{
The api dictionary was not fully tested, if you find any bugs please report. Use only api dictionaries from trusted source or review them before using!
}
\examples{
\dontrun{
# get ticker from market
market.api.process(market = 'kraken', currency_pair = c('BTC', 'EUR'), action='ticker')

# get ticker from few markets and combine
op <- options("Rbitcoin.antiddos.verbose" = 1) # will print antiddos waiting time
ticker_all <- rbindlist(list(
  market.api.process(market = 'bitstamp', currency_pair = c('BTC', 'USD'), action='ticker'),
  market.api.process(market = 'btce', currency_pair = c('LTC', 'USD'), action='ticker'),
  market.api.process(market = 'btce', currency_pair = c('LTC', 'BTC'), action='ticker'),
  market.api.process(market = 'kraken', currency_pair = c('BTC','EUR'), action='ticker'),
  market.api.process(market = 'kraken', currency_pair = c('LTC','EUR'), action='ticker'),
  market.api.process(market = 'kraken', currency_pair = c('BTC','LTC'), action='ticker')
))
options(op)
print(ticker_all)

# get wallet from market
market.api.process(market = 'kraken', action = 'wallet', key = '', secret = '')

# get wallet from all markets and combine
wallet_all <- rbindlist(list(
  market.api.process(market = 'bitstamp', action = 'wallet',
                     client_id = '', key = '', secret = ''),
  market.api.process(market = 'btce', action = 'wallet',
                     method = '', key = '', secret = ''),
  market.api.process(market = 'kraken', action = 'wallet',
                     key = '', secret = '')
))
print(wallet_all)

# get order book from market
market.api.process(market = 'kraken', currency_pair = c('BTC', 'EUR'), action = 'order_book')

# get open orders from market
market.api.process(market = 'kraken', action = 'open_orders', key = '', secret = '')

# place limit order
market.api.process(market = 'kraken', currency_pair = c('BTC', 'EUR'), action = 'place_limit_order',
                   req = list(type = 'sell', amount = 1, price = 8000), # sell 1 btc for 8000 eur
                   key = '', secret = '')

# cancel order
market.api.process(market = 'kraken', action = 'cancel_order,
                   req = list(oid = 'oid_from_open_orders'),
                   key = '', secret = '')

# get trades, since arg allowed: `req = list(tid = "123456")`
market.api.process(market = 'kraken', currency_pair = c('BTC', 'EUR'), action = 'trades')
}
}
\seealso{
\code{\link{market.api.query}}, \code{\link{api.dict}}, \code{\link{antiddos}}, \code{\link{query.dict}}
}

